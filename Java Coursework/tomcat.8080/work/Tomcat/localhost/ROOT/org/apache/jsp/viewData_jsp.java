/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2024-03-07 16:51:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;

public final class viewData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <title>List of Patients</title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"viewData.css\" />\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("    <div\n");
      out.write("      class=\"patient-list-container\"\n");
      out.write("      id=\"patientListContainer\"\n");
      out.write("      style=\"display: none\"\n");
      out.write("    >\n");
      out.write("      <div class=\"patient-list-header\" id=\"myHeader\">\n");
      out.write("        <h2 class=\"patient-list-title\">List of Patients</h2>\n");
      out.write("        <button class=\"toggle-button expanded\" onclick=\"togglePatientList()\">\n");
      out.write("          <svg viewBox=\"0 0 24 24\">\n");
      out.write("            <path d=\"M16.59 8.59L12 13.17L7.41 8.59L6 10l6 6l6-6z\"></path>\n");
      out.write("          </svg>\n");
      out.write("        </button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"patient-states-container\">\n");
      out.write("      ");
 String[] patientStates = (String[])
      request.getAttribute("patientStates"); 
      out.write("\n");
      out.write("      <ul class=\"bar-chart\">\n");
      out.write("        ");
 for (String patientState : patientStates) { 
      out.write("\n");
      out.write("        <li>\n");
      out.write("          ");
 String[] stateAndCount = patientState.split(":"); 
      out.write("\n");
      out.write("          <span class=\"state-label\">");
      out.print( stateAndCount[0] );
      out.write("</span>\n");
      out.write("          <span\n");
      out.write("            class=\"bar\"\n");
      out.write("            style=\"width: ");
      out.print( Integer.parseInt(stateAndCount[1]) * 10 );
      out.write("%\"\n");
      out.write("          ></span>\n");
      out.write("          <span class=\"count\">");
      out.print( stateAndCount[1] );
      out.write("</span>\n");
      out.write("        </li>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("      </ul>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("      function togglePatientList() {\n");
      out.write("        const container = document.querySelector('.patient-list-container');\n");
      out.write("        const button = document.querySelector('.toggle-button');\n");
      out.write("        container.classList.toggle('expanded');\n");
      out.write("        button.classList.toggle('expanded'); // Ensure this line is added to toggle the class on the button as well.\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      var patientListContainer = document.getElementById(\n");
      out.write("        'patientListContainer'\n");
      out.write("      );\n");
      out.write("\n");
      out.write("      patientListContainer.onscroll = function () {\n");
      out.write("        myFunction();\n");
      out.write("      };\n");
      out.write("    </script>\n");
      out.write("  </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
