/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2024-03-04 14:46:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;

public final class viewData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <title>List of Patients</title>\n");
      out.write("    <style>\n");
      out.write("      /* Overall styles */\n");
      out.write("      body {\n");
      out.write("        font-family: sans-serif;\n");
      out.write("        margin: 0;\n");
      out.write("        padding: 0;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for the patient list container */\n");
      out.write("\n");
      out.write("      .patient-list-container {\n");
      out.write("        background-color: #f0f0f0;\n");
      out.write("        border-radius: 10px;\n");
      out.write("        padding: 20px;\n");
      out.write("        padding-bottom: 30px; /* Increased padding at the bottom */\n");
      out.write("        position: fixed;\n");
      out.write("        top: 0;\n");
      out.write("        left: 0;\n");
      out.write("        height: calc(\n");
      out.write("          100vh - 30px\n");
      out.write("        ); /* Adjusted height to account for added padding */\n");
      out.write("        width: 250px;\n");
      out.write("        overflow-y: auto;\n");
      out.write("        transition: width 0.3s ease-in-out;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for the expanded state */\n");
      out.write("      .patient-list-container.expanded {\n");
      out.write("        width: 500px; /* Expanded width */\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for the patient list header */\n");
      out.write("      .patient-list-header {\n");
      out.write("        display: flex; /* Center title and toggle button horizontally */\n");
      out.write("        justify-content: space-between;\n");
      out.write("        align-items: center;\n");
      out.write("        margin-bottom: 10px;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for the patient list title */\n");
      out.write("      .patient-list-title {\n");
      out.write("        font-size: 18px;\n");
      out.write("        font-weight: bold;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for the toggle button */\n");
      out.write("      .toggle-button {\n");
      out.write("        background-color: transparent;\n");
      out.write("        border: none;\n");
      out.write("        cursor: pointer;\n");
      out.write("        outline: none; /* Remove default outline */\n");
      out.write("        transform: rotate(\n");
      out.write("          90deg\n");
      out.write("        ); /* Initial rotation to point the arrow in the correct direction */\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* SVG styles for the expand/collapse icon */\n");
      out.write("      .toggle-button svg {\n");
      out.write("        width: 20px;\n");
      out.write("        height: 20px;\n");
      out.write("        fill: #333; /* Adjust icon color if needed */\n");
      out.write("        transition: transform 0.3s ease-in-out; /* Smooth rotation animation */\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      .toggle-button.expanded svg {\n");
      out.write("        transform: rotate(\n");
      out.write("          180deg\n");
      out.write("        ); /* Correct this as needed to ensure it points in the desired direction */\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      /* Styles for individual patient names */\n");
      out.write("      .patient-name {\n");
      out.write("        margin-bottom: 5px;\n");
      out.write("      }\n");
      out.write("    </style>\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("    <div class=\"patient-list-container\">\n");
      out.write("      <div class=\"patient-list-header\">\n");
      out.write("        <h2 class=\"patient-list-title\">List of Patients</h2>\n");
      out.write("        <button class=\"toggle-button expanded\" onclick=\"togglePatientList()\">\n");
      out.write("          <svg viewBox=\"0 0 24 24\">\n");
      out.write("            <path d=\"M16.59 8.59L12 13.17L7.41 8.59L6 10l6 6l6-6z\"></path>\n");
      out.write("          </svg>\n");
      out.write("        </button>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      ");
 String[] patients = (String[]) request.getAttribute("patientNames"); if
      (patients != null && patients.length > 0) { for (int i = 0; i <
      patients.length; i++) { String patientName = patients[i]; 
      out.write("\n");
      out.write("      <p class=\"patient-name\">");
      out.print( patientName );
      out.write("</p>\n");
      out.write("      ");
 } } else { 
      out.write("\n");
      out.write("      <p>No patient data found.</p>\n");
      out.write("      ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("      function togglePatientList() {\n");
      out.write("        const container = document.querySelector('.patient-list-container');\n");
      out.write("        const button = document.querySelector('.toggle-button');\n");
      out.write("        container.classList.toggle('expanded');\n");
      out.write("        button.classList.toggle('expanded'); // Ensure this line is added to toggle the class on the button as well.\n");
      out.write("      }\n");
      out.write("    </script>\n");
      out.write("  </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
